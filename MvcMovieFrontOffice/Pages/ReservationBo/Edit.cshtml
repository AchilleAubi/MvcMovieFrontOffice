@page
@model MvcMovieFrontOffice.Pages.ReservationBo.EditModel

@{
    ViewData["Title"] = "Edit";
    Layout = "_AdminLayout";
}

<div class="card shadow-sm">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">
            <i class="fa fa-edit"></i> Edit Reservation: @Model.ReservationView?.ReservationId
        </h5>
    </div>
    <div class="card-body">
        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
        <input type="hidden" name="id" value="@Model.ReservationView?.ReservationId" />

        <div class="row">
            <!-- Start Date & End Date -->
            <div class="col-md-6 mb-3">
                <label for="startDate" class="form-label">Start Date</label>
                <input type="date" id="startDate" name="startDate"
                       value="@Model.ReservationView?.StartDate.ToString("yyyy-MM-dd")"
                       class="form-control" readonly>
            </div>
            <div class="col-md-6 mb-3">
                <label for="endDate" class="form-label">End Date</label>
                <input type="date" id="endDate" name="endDate"
                       value="@Model.ReservationView?.EndDate.ToString("yyyy-MM-dd")"
                       class="form-control" readonly>
            </div>

            <!-- Status -->
            <div class="col-md-6 mb-3">
                <label for="status" class="form-label">Status</label>
                <select id="status" name="status" class="form-select">
                    <option value="pending" @(Model.ReservationView?.Status == "pending" ? "selected" : "")>Pending</option>
                    <option value="confirmed" @(Model.ReservationView?.Status == "confirmed" ? "selected" : "")>Confirmed</option>
                    <option value="completed" @(Model.ReservationView?.Status == "completed" ? "selected" : "")>Completed</option>
                    <option value="canceled" @(Model.ReservationView?.Status == "canceled" ? "selected" : "")>Canceled</option>
                </select>
            </div>

            <!-- Total Price & Rest -->
            <div class="col-md-6 mb-3">
                <label for="totalPrice" class="form-label">Total Price (€)</label>
                <input type="number" id="totalPrice" name="totalPrice"
                       value="@Model.ReservationView?.TotalPrice"
                       class="form-control" readonly>
            </div>
            <div class="col-md-6 mb-3">
                <label for="rest" class="form-label">Rest (€)</label>
                <input type="number" id="rest" name="rest"
                       value="@(@Model.ReservationView?.TotalPrice - @Model.ReservationView?.AmountPayed)"
                       class="form-control" readonly>
            </div>

            <!-- Model & Make -->
            <div class="col-md-6 mb-3">
                <label for="model" class="form-label">Model</label>
                <input type="text" id="model" name="model"
                       value="@Model.ReservationView?.Model"
                       class="form-control" readonly>
            </div>
            <div class="col-md-6 mb-3">
                <label for="make" class="form-label">Make</label>
                <input type="text" id="make" name="make"
                       value="@Model.ReservationView?.make"
                       class="form-control" readonly>
            </div>

            <!-- Availability -->
            <div class="col-md-6 mb-3">
                <label for="availability" class="form-label">Availability</label>
                <select id="availability" name="availability" class="form-select">
                    <option value="true" @(Model.ReservationView?.availability == true ? "selected" : null)>Available</option>
                    <option value="false" @(Model.ReservationView?.availability == false ? "selected" : null)>Unavailable</option>
                </select>
            </div>

            <!-- Full Name -->
            <div class="col-md-6 mb-3">
                <label for="fullname" class="form-label">Full Name</label>
                <input type="text" id="fullname" name="fullname"
                       value="@Model.ReservationView?.FullName"
                       class="form-control" readonly>
            </div>
        </div>
    </div>

    <div class="card-footer text-end">
        <button id="saveButton" class="btn btn-success">
            <i class="zmdi zmdi-save"></i> Save
        </button>
        <a href="/ReservationBo/Index" class="btn btn-secondary">
            <i class="fa fa-arrow-left"></i> Cancel
        </a>
    </div>
</div>


<script>
    document.getElementById("saveButton").addEventListener("click", async function (event) {
        event.preventDefault();

        const reservationUpdate = {
            id: @Json.Serialize(Model.ReservationView?.ReservationId ?? 0),
            vehicleId: @Json.Serialize(Model.ReservationView?.VehicleId ?? 0),
            userId: @Json.Serialize(Model.ReservationView?.UserId ?? ""),
            startDate: @Json.Serialize(Model.ReservationView?.StartDate.ToString("yyyy-MM-ddTHH:mm:ss") ?? ""),
            endDate: @Json.Serialize(Model.ReservationView?.EndDate.ToString("yyyy-MM-ddTHH:mm:ss") ?? ""),
            status: document.getElementById("status").value,
            totalPrice: @Json.Serialize(Model.ReservationView?.TotalPrice ?? 0),
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        try {
            const response = await fetch(`http://localhost:5259/api/reservations/${@Model.ReservationView?.ReservationId}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(reservationUpdate)
            });

            const vehicleResponse = await fetch('http://localhost:5259/api/vehicles/@Model.ReservationView?.VehicleId');

            if (vehicleResponse.ok) {
                let vehicle = await vehicleResponse.json();

                console.log(vehicle, 'dfd');

                const vehicleToUpdate = {
                    id: vehicle.id,
                    model: vehicle.model,
                    make: vehicle.make,
                    year: vehicle.year,
                    availability: document.getElementById("availability").value === "true",
                    price: vehicle.price,
                    createdAt: vehicle.createdAt,
                    updatedAt: vehicle.updatedAt,
                    typeId: vehicle.typeId,
                    image: vehicle.image
                };

                console.log(JSON.stringify(vehicleToUpdate), 'ao')
                
                const updateResponse = await fetch(`http://localhost:5259/api/vehicles/${vehicleToUpdate.id}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(vehicleToUpdate)
                });
                
                if (updateResponse.ok) {
                    
                }
            }
            
            if (response.ok) {
                alert("Reservation updated successfully!");
                window.location.href = "/ReservationBo/Index";
            } else {
                const errorMessage = await response.text();
                alert("Error: " + errorMessage);
            }
        } catch (error) {
            console.error("Network error:", error);
            alert("An error occurred while updating the reservation.");
        }
    });
</script>